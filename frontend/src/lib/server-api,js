// You can create a new file: frontend/src/lib/server-api.js

import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

/**
 * A helper function to make authenticated API calls from within Next.js Server Components.
 */
export async function fetchFromServer(path, options = {}) {
  // 1. Create a Supabase client that can read the request's cookies
  const cookieStore = cookies();
  const supabase = createServerComponentClient({ cookies: () => cookieStore });

  // 2. Get the user's session from the cookies
  const { data: { session } } = await supabase.auth.getSession();

  // 3. Construct the full API URL
  const apiUrl = `${process.env.NEXT_PUBLIC_API_BASE_URL}${path}`;

  // 4. Create the headers, including the Authorization token
  const headers = new Headers(options.headers);
  if (session) {
    headers.set('Authorization', `Bearer ${session.access_token}`);
  }
  // Ensure we are expecting JSON
  headers.set('Content-Type', 'application/json');

  // 5. Make the fetch call
  const response = await fetch(apiUrl, {
    ...options,
    headers,
  });

  // Basic error handling
  if (!response.ok) {
    // You can add more robust error handling here
    const errorBody = await response.text();
    console.error(`API Error (${response.status}): ${errorBody}`);
    // Re-throw or return a specific error structure
    throw new Error(`API call to ${path} failed with status ${response.status}`);
  }

  // If the response is successful, parse and return the JSON
  return response.json();
}